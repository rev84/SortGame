// Generated by CoffeeScript 1.10.0
var Game, Utl;

$().ready(function() {
  $(window).on('resize', Game.alignSpan);
  $(window).on('contextmenu', function() {
    if (!Game.isClickable) {
      return false;
    }
    Game.answer2character();
    return false;
  });
  $(window).on('click', function() {
    if (Game.isNextQuestionWait) {
      Game.isNextQuestionWait = false;
      return Game.putQuestion();
    }
  });
  Game.startGame();
  return Game.alignSpan();
});

Game = (function() {
  function Game() {}

  Game.MOVE_MSEC = 200;

  Game.LIMIT_SEC = 30;

  Game.UPDATE_MSEC = 100;

  Game.questions = [];

  Game.isClickable = false;

  Game.isNextQuestionWait = false;

  Game.timer = false;

  Game.restSec = null;

  Game.level = null;

  Game.solution = [];

  Game.description = null;

  Game.answerIndexes = [];

  Game.characterSpan = [];

  Game.answerSpan = [];

  Game.bodySpan = [];

  Game.character2answer = function(obj) {
    var myIndex, offset, targetIndex;
    myIndex = $(obj).data('index');
    if (0 <= Game.answerIndexes.indexOf(myIndex)) {
      return;
    }
    targetIndex = Game.answerIndexes.length;
    offset = Game.answerSpan[targetIndex].offset();
    Game.bodySpan[myIndex].animate(offset, Game.MOVE_MSEC);
    Game.answerIndexes.push(myIndex);
    if (Game.answerSpan.length === Game.answerIndexes.length) {
      return console.log(Game.judge());
    } else {
      return Game.se('push');
    }
  };

  Game.answer2character = function() {
    var myIndex, offset, targetIndex;
    if (Game.solution.length === Game.answerIndexes.length) {
      return;
    }
    myIndex = Game.answerIndexes.length - 1;
    if (myIndex < 0) {
      return;
    }
    targetIndex = Game.answerIndexes[myIndex];
    offset = Game.characterSpan[targetIndex].offset();
    Game.bodySpan[targetIndex].animate(offset, Game.MOVE_MSEC);
    Game.answerIndexes.pop();
    return Game.se('cancel');
  };

  Game.judge = function() {
    var index, j, len, ref, result;
    this.stopTimer();
    result = '';
    ref = this.answerIndexes;
    for (j = 0, len = ref.length; j < len; j++) {
      index = ref[j];
      result += this.bodySpan[index].html();
    }
    if (result === this.solution) {
      this.se('correct');
      return setTimeout(((function(_this) {
        return function() {
          return _this.isNextQuestionWait = true;
        };
      })(this)), 1000);
    } else {
      this.se('mistake');
      return setTimeout(this.gameover, 1000);
    }
  };

  Game.clear = function() {
    var j, l, len, len1, len2, o, ref, ref1, ref2, s;
    ref = this.characterSpan;
    for (j = 0, len = ref.length; j < len; j++) {
      s = ref[j];
      if (s !== null) {
        s.remove();
      }
    }
    ref1 = this.answerSpan;
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      s = ref1[l];
      if (s !== null) {
        s.remove();
      }
    }
    ref2 = this.bodySpan;
    for (o = 0, len2 = ref2.length; o < len2; o++) {
      s = ref2[o];
      if (s !== null) {
        s.remove();
      }
    }
    this.characterSpan = [];
    this.answerSpan = [];
    this.bodySpan = [];
    this.answerIndexes = [];
    this.description = null;
    $('#description').html('');
    $('#character').html('');
    $('#answer').html('');
    return $('#timer').html('');
  };

  Game.alignSpan = function() {
    var answerIndex, bodyIndex, j, ref;
    for (answerIndex = j = 0, ref = Game.answerIndexes.length; 0 <= ref ? j < ref : j > ref; answerIndex = 0 <= ref ? ++j : --j) {
      bodyIndex = Game.answerIndexes[answerIndex];
      Game.bodySpan[bodyIndex].offset(Game.answerSpan[answerIndex].offset());
    }
    return $('span.character_main').each(function() {
      var index;
      index = $(this).data('index');
      if (0 <= Game.answerIndexes.indexOf(index)) {
        return;
      }
      return Game.bodySpan[index].offset(Game.characterSpan[index].offset());
    });
  };

  Game.startGame = function() {
    this.questions = Utl.shuffle(JSON.parse(JSON.stringify(QUESTIONS)));
    return this.putQuestion();
  };

  Game.putQuestion = function() {
    var nextQuestion;
    nextQuestion = this.questions.pop();
    return this.initQuestion(nextQuestion.description, nextQuestion.word);
  };

  Game.initQuestion = function(description, answer) {
    var answerArray, answerSpan, bodySpan, chara, characterSpan, index, j, l, len, ref;
    this.description = description;
    this.solution = answer;
    answerArray = Utl.shuffle(answer.split(''));
    this.clear();
    $('#description').html(description);
    for (j = 0, len = answerArray.length; j < len; j++) {
      chara = answerArray[j];
      characterSpan = $('<span>').addClass('character_base character_empty').html('&nbsp');
      answerSpan = $('<span>').addClass('character_base character_empty').html('&nbsp');
      $('#character').append(characterSpan);
      $('#answer').append(answerSpan);
      this.characterSpan.push(characterSpan);
      this.answerSpan.push(answerSpan);
    }
    for (index = l = 0, ref = answerArray.length; 0 <= ref ? l < ref : l > ref; index = 0 <= ref ? ++l : --l) {
      bodySpan = $('<span>').addClass('character_base character_main').data('index', index).html(answerArray[index]);
      bodySpan.on('click', function() {
        if (!Game.isClickable) {
          return;
        }
        return Game.character2answer(this);
      });
      $('body').append(bodySpan);
      bodySpan.offset(this.characterSpan[index].offset());
      this.bodySpan.push(bodySpan);
    }
    this.startTimer();
    return this.clickable(true);
  };

  Game.clickable = function(bool) {
    return this.isClickable = !!bool;
  };

  Game.startTimer = function() {
    this.stopTimer();
    this.restSec = this.LIMIT_SEC * 1000;
    return this.timer = setInterval(this.updateTimer, this.UPDATE_MSEC);
  };

  Game.updateTimer = function() {
    var float, sec;
    Game.restSec -= Game.UPDATE_MSEC;
    if (Game.restSec <= 0) {
      Game.clickable(false);
      $('#timer').html('0.0');
      Game.stopTimer();
      Game.se('mistake');
      return setTimeout(Game.gameover, 1000);
    } else {
      sec = Math.abs(Math.floor(Game.restSec / 1000));
      float = Math.abs(Math.floor(Game.restSec / 100) % 10);
      return $('#timer').html('' + sec + '.' + float);
    }
  };

  Game.stopTimer = function() {
    if (this.timer !== false) {
      clearInterval(this.timer);
    }
    return this.timer = false;
  };

  Game.se = function(filename) {
    var aud;
    aud = new Audio('./audio/' + filename + '.mp3');
    aud.volume = 0.5;
    return aud.play();
  };

  Game.gameover = function() {
    var alreadySortedAnswerSpan, alreadySortedBodySpan, answerArray, answerChar, answerIndex, bodySpanIndex, j, l, offset, ref, ref1, results;
    answerArray = Game.solution.split('');
    alreadySortedBodySpan = [];
    alreadySortedAnswerSpan = [];
    for (answerIndex = j = 0, ref = Game.answerIndexes.length; 0 <= ref ? j < ref : j > ref; answerIndex = 0 <= ref ? ++j : --j) {
      bodySpanIndex = Game.answerIndexes[answerIndex];
      if (answerArray[answerIndex] === Game.bodySpan[bodySpanIndex].html()) {
        alreadySortedBodySpan.push(bodySpanIndex);
        alreadySortedAnswerSpan.push(answerIndex);
      }
    }
    results = [];
    for (answerIndex = l = 0, ref1 = answerArray.length; 0 <= ref1 ? l < ref1 : l > ref1; answerIndex = 0 <= ref1 ? ++l : --l) {
      if (Utl.inArray(answerIndex, alreadySortedAnswerSpan)) {
        continue;
      }
      answerChar = answerArray[answerIndex];
      results.push((function() {
        var o, ref2, results1;
        results1 = [];
        for (bodySpanIndex = o = 0, ref2 = this.bodySpan.length; 0 <= ref2 ? o < ref2 : o > ref2; bodySpanIndex = 0 <= ref2 ? ++o : --o) {
          if (Utl.inArray(bodySpanIndex, alreadySortedBodySpan)) {
            continue;
          }
          if (answerChar === this.bodySpan[bodySpanIndex].html()) {
            offset = this.answerSpan[answerIndex].offset();
            this.bodySpan[bodySpanIndex].animate(offset, this.MOVE_MSEC).addClass('character_notice');
            alreadySortedBodySpan.push(bodySpanIndex);
            break;
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      }).call(Game));
    }
    return results;
  };

  return Game;

})();

Utl = (function() {
  function Utl() {}

  Utl.numFormat = function(num) {
    return String(num).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1,');
  };

  Utl.rand = function(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };

  Utl.genPassword = function(length) {
    var chars, i, j, ref, res;
    if (length == null) {
      length = 4;
    }
    chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    res = '';
    for (i = j = 0, ref = length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      res += chars.substr(this.rand(0, chars.length - 1), 1);
    }
    return res;
  };

  Utl.adrBar = function(url) {
    return window.history.replaceState('', '', '' + url);
  };

  Utl.getQuery = function(key, defaultValue) {
    var j, k, len, p, params, query, ref, res, v;
    if (key == null) {
      key = null;
    }
    if (defaultValue == null) {
      defaultValue = null;
    }
    query = document.location.search.substring(1);
    params = query.split('&');
    res = {};
    for (j = 0, len = params.length; j < len; j++) {
      p = params[j];
      ref = p.split('='), k = ref[0], v = ref[1];
      res[k] = v;
    }
    if (key === null) {
      return res;
    }
    if (res[key] != null) {
      return res[key];
    }
    return defaultValue;
  };

  Utl.normalize = function(num, min, max) {
    var range;
    if (min == null) {
      min = 0;
    }
    if (max == null) {
      max = 1;
    }
    range = Math.abs(max - min);
    if (num < min) {
      num += range * Math.ceil(Math.abs(num - min) / range);
    } else if (max <= num) {
      num -= range * (Math.floor(Math.abs(num - max) / range) + 1);
    }
    return num;
  };

  Utl.time = function(date) {
    if (date == null) {
      date = null;
    }
    if (date === null) {
      date = new Date();
    }
    return Math.floor(+date / 1000);
  };

  Utl.militime = function(date, getAsFloat) {
    if (date == null) {
      date = null;
    }
    if (getAsFloat == null) {
      getAsFloat = false;
    }
    if (date === null) {
      date = new Date();
    }
    return +date / (getAsFloat ? 1000 : 1);
  };

  Utl.dateStr = function(date, dateSep) {
    if (date == null) {
      date = null;
    }
    if (dateSep == null) {
      dateSep = '-';
    }
    if (date === null) {
      date = new Date();
    }
    return '' + this.zerofill(date.getFullYear(), 4) + dateSep + this.zerofill(date.getMonth() + 1, 2) + dateSep + this.zerofill(date.getDate(), 2);
  };

  Utl.datetimeStr = function(date, dateSep, timeSep, betweenSep) {
    if (date == null) {
      date = null;
    }
    if (dateSep == null) {
      dateSep = '-';
    }
    if (timeSep == null) {
      timeSep = ':';
    }
    if (betweenSep == null) {
      betweenSep = ' ';
    }
    if (date === null) {
      date = new Date();
    }
    return this.dateStr(date, dateSep) + betweenSep + this.zerofill(date.getHours(), 2) + timeSep + this.zerofill(date.getMinutes(), 2) + timeSep + this.zerofill(date.getSeconds(), 2);
  };

  Utl.difftime = function(targetDate, baseDate, nowSec, nowStr, agoStr, secStr, minStr, hourStr, dayStr, monStr, yearStr) {
    var baseTime, d, diffTime, h, m, mo, targetTime, y;
    if (baseDate == null) {
      baseDate = null;
    }
    if (nowSec == null) {
      nowSec = 0;
    }
    if (nowStr == null) {
      nowStr = 'ついさっき';
    }
    if (agoStr == null) {
      agoStr = '前';
    }
    if (secStr == null) {
      secStr = '秒';
    }
    if (minStr == null) {
      minStr = '分';
    }
    if (hourStr == null) {
      hourStr = '時間';
    }
    if (dayStr == null) {
      dayStr = '日';
    }
    if (monStr == null) {
      monStr = '月';
    }
    if (yearStr == null) {
      yearStr = '年';
    }
    if (baseDate === null) {
      baseTime = this.time();
    }
    targetTime = this.time(targetDate);
    diffTime = baseTime - targetTime;
    if (diffTime < 0) {
      return null;
    }
    if (nowSec >= diffTime) {
      return nowStr;
    }
    y = Math.floor(diffTime / (60 * 60 * 24 * 30 * 12));
    if (y > 0) {
      return '' + y + yearStr + agoStr;
    }
    diffTime -= y * (60 * 60 * 24 * 30 * 12);
    mo = Math.floor(diffTime / (60 * 60 * 24 * 30));
    if (mo > 0) {
      return '' + mo + monStr + agoStr;
    }
    diffTime -= mo * (60 * 60 * 24 * 30);
    d = Math.floor(diffTime / (60 * 60 * 24));
    if (d > 0) {
      return '' + d + dayStr + agoStr;
    }
    diffTime -= d * (60 * 60 * 24);
    h = Math.floor(diffTime / (60 * 60));
    if (h > 0) {
      return '' + h + hourStr + agoStr;
    }
    diffTime -= h * (60 * 60);
    m = Math.floor(diffTime / 60);
    if (m > 0) {
      return '' + m + minStr + agoStr;
    }
    diffTime -= m * 60;
    if (diffTime > 0) {
      return '' + diffTime + secStr + agoStr;
    }
    return nowStr;
  };

  Utl.zerofill = function(num, digit) {
    return ('' + this.repeat('0', digit) + num).slice(-digit);
  };

  Utl.repeat = function(str, times) {
    return Array(1 + times).join(str);
  };

  Utl.shuffle = function(ary) {
    var i, n, ref;
    n = ary.length;
    while (n) {
      n--;
      i = this.rand(0, n);
      ref = [ary[n], ary[i]], ary[i] = ref[0], ary[n] = ref[1];
    }
    return ary;
  };

  Utl.inArray = function(needle, ary) {
    var j, len, v;
    for (j = 0, len = ary.length; j < len; j++) {
      v = ary[j];
      if (v === needle) {
        return true;
      }
    }
    return false;
  };

  Utl.clone = function(obj) {
    if ($.isArray(obj)) {
      $.extend(true, [], obj);
    } else if (obj instanceof Object) {
      $.extend(true, {}, obj);
    }
    return obj;
  };

  Utl.arrayFill = function(length, val) {
    var i, j, ref, res;
    if (val == null) {
      val = null;
    }
    res = [];
    for (i = j = 0, ref = length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      res[i] = this.clone(val);
    }
    return res;
  };

  Utl.array2dFill = function(x, y, val) {
    var j, l, ref, ref1, res, xx, yAry, yy;
    if (y == null) {
      y = null;
    }
    if (val == null) {
      val = null;
    }
    if (y === null) {
      y = x;
    }
    res = [];
    yAry = [];
    for (yy = j = 0, ref = y; 0 <= ref ? j < ref : j > ref; yy = 0 <= ref ? ++j : --j) {
      yAry[yy] = this.clone(val);
    }
    for (xx = l = 0, ref1 = x; 0 <= ref1 ? l < ref1 : l > ref1; xx = 0 <= ref1 ? ++l : --l) {
      res[xx] = this.clone(yAry);
    }
    return res;
  };

  Utl.count = function(object) {
    return Object.keys(object).length;
  };

  Utl.uuid4 = function() {
    var i, j, random, uuid;
    uuid = '';
    for (i = j = 0; j < 32; i = ++j) {
      random = Math.random() * 16 | 0;
      if (i === 8 || i === 12 || i === 16 || i === 20) {
        uuid += '-';
      }
      uuid += (i === 12 ? 4 : (i === 16 ? random & 3 | 8 : random)).toString(16);
    }
    return uuid;
  };

  Utl.delLs = function(key) {
    return localStorage.removeItem(key);
  };

  Utl.setLs = function(key, value) {
    var json;
    if (value == null) {
      value = null;
    }
    if (value === null) {
      return this.delLs(key);
    }
    json = JSON.stringify(value);
    return localStorage.setItem(key, json);
  };

  Utl.getLs = function(key) {
    var error, res;
    res = localStorage.getItem(key);
    try {
      res = JSON.parse(res);
    } catch (error) {
      res = null;
    }
    return res;
  };

  return Utl;

})();
